stages:
  - build
  - deploy
  - test

build_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker build -t felipegreggio/imc-app:latest .
    - docker push felipegreggio/imc-app:latest

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  script:
    - echo "Deploy project"
    - echo "Running docker in port 8080"
    - docker run -d -p 8080:80 felipegreggio/imc-app:latest

    # Install required tools for Alpine Linux
    - apk add --no-cache curl jq

    # Install ngrok
    - wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
    - unzip ngrok-stable-linux-amd64.zip
    - ./ngrok authtoken $NGROK_AUTH_TOKEN
    - ./ngrok http 8080 &
    - sleep 10  # Give ngrok some time to initialize
    - curl -s http://localhost:4040/api/tunnels | jq '.tunnels[0].public_url'


alert:
  stage: deploy
  after_script:
    - chmod +x telegram_notification.sh
    - ./telegram_notification.sh
  script:
    - echo "send message to telegram!"
  when: always

sast_test:
  stage: test
  image: node:14
  script:
    - echo "Running SAST on $NGROK_URL"
    - npm install
    - ./node_modules/.bin/eslint . -f json -o eslint-output.json
  artifacts:
    when: always
    paths: [eslint-output.json]
  allow_failure: true


